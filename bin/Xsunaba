#!/bin/ksh

#
# Xsunaba - X11 application sandbox
#
# Originally based on http://blog.sleeplessbeastie.eu/2013/07/19/how-to-create-browser-sandbox/
#
# MIT License
#
# Copyright (c) 2025 David Uhden Collado
# Copyright (c) 2020 Morgan Aldridge
# Copyright (c) 2013 Milosz Galazka
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

# Enable verbose output if VERBOSE is set to true
VERBOSE="${VERBOSE:=false}"

# Display used to show the application
XSUNABA_DISPLAY="${XSUNABA_DISPLAY:=:32}"

# Sandbox user
XSUNABA_USER="${XSUNABA_USER:=xsunaba}"

# Authentication cookie
XSUNABA_MCOOKIE=$(openssl rand -hex 16)

# Authentication file
XSUNABA_XAUTH="$HOME/.Xauthority-xsunaba"

# Local X11 sockets, used to determine if the application is running
LOCAL_SOCKETS="/tmp/.X11-unix"

# Window width and height
WIDTH="${WIDTH:=1024}"
HEIGHT="${HEIGHT:=768}"

# Application to start
APPLICATION="$@"

# Function to adjust window dimensions to occupy the full window
adjust_window_dimensions() {
  if [ "$VERBOSE" = true ]; then echo "Checking for window geometry hacks for '$(basename "$1")'..."; fi
  case "$(basename "$1")" in
    "chrome")
      APPLICATION="${APPLICATION} -window-size=${WIDTH},${HEIGHT} --window-position=0,0"
      ;;
    "firefox")
      APPLICATION="${APPLICATION} -width ${WIDTH} -height ${HEIGHT}"
      ;;
  esac
}

# Function to find an unused display for Xephyr
find_unused_display() {
  for i in $(seq 32 99); do
    if [ ! -e ${LOCAL_SOCKETS}/X${i} ]; then
      XSUNABA_DISPLAY=":${i}"
      break
    fi
  done
  if [ "$VERBOSE" = true ]; then echo "Using display ${XSUNABA_DISPLAY#:}"; fi
}

# Function to start Xephyr
start_xephyr() {
  xauth -f ${XSUNABA_XAUTH} add ${XSUNABA_DISPLAY} . ${XSUNABA_MCOOKIE}
  Xephyr -auth ${XSUNABA_XAUTH} -screen ${WIDTH}x${HEIGHT} -br -nolisten tcp $XSUNABA_DISPLAY &
  XSUNABA_XEPHYR_PID=$!
  sleep 1
  if ! ps -p $XSUNABA_XEPHYR_PID > /dev/null; then
    echo "Failed to start Xephyr. Exiting."
    exit 1
  fi
}

# Function to launch the application as the sandbox user
launch_application() {
  if [ "$VERBOSE" = "true" ]; then echo "Launching '${APPLICATION}' on display ${XSUNABA_DISPLAY}..."; fi
  doas -u $XSUNABA_USER env DISPLAY=$XSUNABA_DISPLAY $APPLICATION
  if [ $? -ne 0 ]; then
    echo "Failed to run the application as $XSUNABA_USER"
    kill $XSUNABA_XEPHYR_PID
    xauth -f $XSUNABA_XAUTH remove $XSUNABA_DISPLAY
    doas -u $XSUNABA_USER xauth remove $XSUNABA_DISPLAY
    exit 1
  fi
}

# Function to stop Xephyr
stop_xephyr() {
  if ps -p $XSUNABA_XEPHYR_PID &>/dev/null; then
    kill $XSUNABA_XEPHYR_PID
    sleep 1
    if ps -p $XSUNABA_XEPHYR_PID >/dev/null; then
      echo "Failed to stop Xephyr. Exiting."
      exit 1
    fi
  fi
}

# Function to clear authentication cookie after session is closed
clear_authentication_cookie() {
  xauth -f $XSUNABA_XAUTH remove $XSUNABA_DISPLAY
  doas -u $XSUNABA_USER xauth remove $XSUNABA_DISPLAY
}

# Main script execution
adjust_window_dimensions "$@"
find_unused_display
start_xephyr
launch_application
stop_xephyr
clear_authentication_cookie
