#!/bin/sh

#
# Xsunaba - X11 application sandbox
#
# Originally based on http://blog.sleeplessbeastie.eu/2013/07/19/how-to-create-browser-sandbox/
#
# MIT License
#
# Copyright (c) 2020 Morgan Aldridge
# Copyright (c) 2013 Milosz Galazka
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

VERBOSE="${VERBOSE:=false}"

# display used to show browser
XSUNABA_DISPLAY="${XSUNABA_DISPLAY:=:32}"

# sandbox user
XSUNABA_USER="${XSUNABA_USER:=xsunaba}"

# authentication cookie
XSUNABA_MCOOKIE=`openssl rand -hex 16`

# authentication file
XSUNABA_XAUTH="$HOME/.Xauthority-xsunaba"

# local X11 sockets, used to determine if application is running
LOCAL_SOCKETS="/tmp/.X11-unix"

# window width and height
WIDTH="${WIDTH:=1024}"
HEIGHT="${HEIGHT:=768}"

# application to start
# width and height are raised above window dimensions to occupy full window
APPLICATION="$@" # -geometry $(expr $WIDTH + 1)x$(expr $HEIGHT + 1)"
if $VERBOSE; then echo "Checking for window geometry hacks for '$(basename "$1")'..."; fi
case "$(basename "$1")" in
  "chrome")
    APPLICATION="${APPLICATION} -window-size=${WIDTH},${HEIGHT} --window-position=0,0"
    ;;
  "firefox")
    APPLICATION="${APPLICATION} -width ${WIDTH} -height ${HEIGHT}"
    ;;
esac

# find an unused display for Xephyr
while [ -e ${LOCAL_SOCKETS}/X${XSUNABA_DISPLAY#:} ]; do
  if $VERBOSE; then echo "Display ${XSUNABA_DISPLAY#:} is in use. Looking for an unused display..."; fi
  XSUNABA_DISPLAY=":$(expr ${XSUNABA_DISPLAY#:} + 1)"
done

# store authentication cookie for chosen display
xauth -f ${XSUNABA_XAUTH} add ${XSUNABA_DISPLAY} . ${XSUNABA_MCOOKIE}
doas -u $XSUNABA_USER xauth add ${XSUNABA_DISPLAY} . ${XSUNABA_MCOOKIE}

# start Xephyr and application
Xephyr -auth ${XSUNABA_XAUTH} -screen ${WIDTH}x${HEIGHT} -br -nolisten tcp $XSUNABA_DISPLAY &
XSUNABA_XEPHYR_PID=$!
sleep 1
if $VERBOSE; then echo "Launching '${APPLICATION}' on display ${XSUNABA_DISPLAY}..."; fi
doas -u $XSUNABA_USER env DISPLAY=$XSUNABA_DISPLAY $APPLICATION

# stop Xephyr
if ps -p $XSUNABA_XEPHYR_PID >/dev/null; then
  kill $XSUNABA_XEPHYR_PID
fi

# clear authentication cookie after session is closed
xauth -f $XSUNABA_XAUTH remove $XSUNABA_DISPLAY
doas -u $XSUNABA_USER xauth remove $XSUNABA_DISPLAY
